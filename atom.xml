<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://alfred-sun.github.io/xxx/atom.xml" rel="self"/>
  <link href="http://alfred-sun.github.io/xxx/"/>
  <updated>2015-01-27T20:15:08+08:00</updated>
  <id>http://alfred-sun.github.io/xxx/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Multiboot: Booting Linux From ISO Placed in HDD via GRUB]]></title>
    <link href="http://alfred-sun.github.io/xxx/blog/2014/10/18/linux-multiboot/"/>
    <updated>2014-10-18T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/xxx/blog/2014/10/18/linux-multiboot</id>
    <content type="html"><![CDATA[<p>I am a big fan of Linux and want to frequently try out various distributions such as <a href="http://www.linuxmint.com/">Mint</a>, <a href="http://www.ubuntu.com/">Ubuntu</a>, <a href="http://www.kali.org/">Kali</a> and <a href="https://www.archlinux.org/">ArchLinux</a>.</p>

<p>Though my main system is Linux 16, I use ISO placed in my HDD to boot and try these various distributions whenever I like.
What are the advatages:
* No messing up with partitions on HDD
* No installation required
* Most major flavours support live booting</p>

<p>Disadvantages:
* Changes are not persisted
* Can take some time to initially setup</p>

<p>I will describe how it can be done with very minimnal conifuration and hassle.</p>

<!--more-->


<p>We are going to setup the multiboot configuration of following OS. They will be booted entirely from ISO placed in HDD
* Gparted Live CD (ISO)
* Kali Linux (ISO)
* Linux Mint 17 (ISO)</p>

<p>I assume you are running any Linux distribution with <a href="http://www.gnu.org/software/grub/">GRUB</a> as the bootloader.</p>

<p>First download the ISO&rsquo;s for the distributions you want to boot. For this article, I downloaded the above 3 from:
* <a href="http://gparted.org/download.php">http://gparted.org/download.php</a>
* <a href="http://www.kali.org/downloads/">http://www.kali.org/downloads/</a>
* <a href="http://www.linuxmint.com/download.php">http://www.linuxmint.com/download.php</a></p>

<p>Place it in any directory in your root partition. In my case I dropped them in  <code>~/isos/</code> as <code>kali.iso</code>, <code>mint17.iso</code> and <code>gparted-live.iso</code></p>

<p>Now, edit your grub configuration to add the custom entries. The file we are looking to edit is <code>/etc/grub.d/40_custom</code></p>

<p>Here is my configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>menuentry &quot;Gparted live&quot; {
</span><span class='line'>  insmod ntfs
</span><span class='line'>  insmod iso9660
</span><span class='line'>
</span><span class='line'>      set isofile=&quot;/home/madhur/isos/gparted-live.iso&quot;
</span><span class='line'>      loopback loop (hd0,msdos2)$isofile
</span><span class='line'>      linux (loop)/live/vmlinuz boot=live config union=aufs noswap noprompt vga=788 ip=frommedia toram=filesystem.squashfs findiso=$isofile nomodeset
</span><span class='line'>      initrd (loop)/live/initrd.img
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>menuentry &quot;Mint 17&quot; {
</span><span class='line'>  insmod ntfs
</span><span class='line'>  insmod iso9660
</span><span class='line'>
</span><span class='line'>      set isofile=&quot;/home/madhur/isos/mint17.iso&quot;
</span><span class='line'>      loopback loop (hd0,msdos2)$isofile
</span><span class='line'>      linux (loop)/casper/vmlinuz file=/cdrom/preseed/linuxmint.seed iso-scan/filename=$isofile boot=casper debug --verbose nomodeset
</span><span class='line'>      initrd (loop)/casper/initrd.lz
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>menuentry &quot;Kali&quot; {
</span><span class='line'>  insmod ntfs
</span><span class='line'>  insmod iso9660
</span><span class='line'>
</span><span class='line'>      set isofile=&quot;/home/madhur/isos/kali.iso&quot;
</span><span class='line'>      loopback loop (hd0,msdos2)$isofile
</span><span class='line'>      linux (loop)/live/vmlinuz boot=live noconfig=sudo username=root hostname=kali findiso=$isofile debug --verbose nomodeset
</span><span class='line'>      initrd (loop)/live/initrd.img
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<p>Some of the parameters deserve explanation:</p>

<ul>
<li><code>insmod ntfs</code> and <code>insmod iso9660</code> load the ntfs and iso kernel modules if they are not loaded</li>
<li><code>debug --verbose</code> will disable the splash screen and show the textual boot screen while loading. This can be helpful to see if something goes wrong.</li>
<li><code>nomodeset</code> will defer loading the Video drivers and will force fallback to BIOS for display. You might not need it. However, it was required in my case as my
 graphics card (Nvidia GeForce 750 Ti) was not detected.</li>
<li><code>(hd0, msdos2)</code> this needs to be changed to reflect the disk# and partition# of partition where ISO&rsquo;s are located. Here <code>hd0</code> means the first hard disk and <code>msdos2</code> means second partition. Note that in grub disk numbering  starts from zero while partition numbering starts from 1. Weird.</li>
</ul>


<p>Once done with all the changes, fire <code>sudo update-grub</code> to update your <code>grub.cfg</code> with these changes.</p>

<h3>Troubleshooting</h3>

<ul>
<li>Note that you might not just get this right in first go. Things can go wrong and be prepared for it.</li>
<li>Take special care of <code>(hd0, msdos2)</code> to determine your correct configuration. It is not easy as /dev/sda1=(hd0, 1) and /dev/sdb1 = (hd1, 1). In my case /dev/sdc referred to hd0. Had hard time figuring out.</li>
<li>While booting from grub, you can press <code>e</code> to edit the command line on the fly and try out various options wuch as commenting out <code>nomodeset</code> and different combinations for <code>(hd#, msdos#)</code>. Once you have figured out the correct option, update the <code>40_custom</code> and execute <code>update-grub</code> again.</li>
<li>You can also press <code>c</code> on the grub screen to fall into grub terminal and execute command such as <code>ls (hd0, msdos2) /</code> to see if that works.</li>
<li>Different distros have their specific command line options. Peek into the ISO file to look at <code>grub.cfg</code> or <code>entries.cfg</code> to determine the corrent command line boot options.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying to Github Pages]]></title>
    <link href="http://alfred-sun.github.io/xxx/blog/2014/09/10/docs-deploying-github/"/>
    <updated>2014-09-10T17:52:00+08:00</updated>
    <id>http://alfred-sun.github.io/xxx/blog/2014/09/10/docs-deploying-github</id>
    <content type="html"><![CDATA[<h2>With Github User/Organization pages</h2>

<p>Use this if you want to host a blog from <code>http://username.github.com</code> (though you can also use <a href="#custom_domains">custom domains</a>).</p>

<p>Create a <a href="https://github.com/repositories/new">new Github repository</a> and name the repository with your user name or organization name <code>username.github.com</code> or <code>organization.github.com</code>.</p>

<p>Github Pages for users and organizations uses the master branch like the public directory on a web server, serving up the files at your Pages url <code>http://username.github.com</code>.
As a result, you&rsquo;ll want to work on the source for your blog in the source branch and commit <em>the generated content</em> to the master branch. Octopress has a configuration task that helps you set all this up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>This will:</p>

<ol>
<li>Ask you for your Github Pages repository url.</li>
<li>Rename the remote pointing to imathis/octopress from &lsquo;origin&rsquo; to &lsquo;octopress&rsquo;</li>
<li>Add your Github Pages repository as the default origin remote.</li>
<li>Switch the active branch from master to source.</li>
<li>Configure your blog&rsquo;s url according to your repository.</li>
<li>Setup a master branch in the _deploy directory for deployment.</li>
</ol>


<p>Next run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>This will generate your blog, copy the generated files into <code>_deploy/</code>, add them to git, commit and push them up to the master branch. In a few seconds you should get an email
from Github telling you that your commit has been received and will be published on your site.</p>

<p><strong>Don&rsquo;t forget</strong> to commit the source for your blog.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> With new repositories, Github sets the default branch based on the branch you push first, and it looks there for the generated site content.
If you&rsquo;re having trouble getting Github to publish your site, go to the admin panel for your repository and make sure that the master branch is the default branch.</p>

<h2>With Github Project pages (gh-pages)</h2>

<p>Github&rsquo;s Project Pages service allows you to host a site for your existing open source project.
Github will look for a <code>gh-pages</code> branch in your project&rsquo;s repository and make the contents available at url like <code>http://username.github.com/project</code>.</p>

<p>Here&rsquo;s now you can set up Octopress site to publish to your projects gh-pages repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<p>This will:</p>

<ol>
<li>Ask you for the repository url for your project.</li>
<li>Rename the remote pointing to imathis/octopress from &lsquo;origin&rsquo; to &lsquo;octopress&rsquo;</li>
<li>Configure your blog for deploying to a subdirectory.</li>
<li>Set up a gh-pages branch for your project in the _deploy directory, ready for deployment.</li>
</ol>


<p>Next run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rake generate
</span><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>This will generate your blog, copy the generated files into <code>_deploy/</code>, add them to git, commit and push them up to the master branch. In a few seconds you should get an email
from Github telling you that your commit has been received and will be published on your site.</p>

<p>Now you have a place to commit the generated content for your site, but you should also set up repository to store the source for your blog.
After you set up a repository for your blog source, add it as the origin remote.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git remote add origin <span class="o">(</span>your repo url<span class="o">)</span>
</span><span class='line'><span class="c"># set your new origin as the default branch</span>
</span><span class='line'>git config branch.master.remote origin
</span></code></pre></td></tr></table></div></figure>


<p>Now push your changes and you&rsquo;ll be all set.</p>

<h2 id="custom_domains">Custom Domains</h2>


<p>First you&rsquo;ll need to create a file named <code>CNAME</code> in the source containing your domain name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;your-domain.com&#39;</span> &gt;&gt; <span class="nb">source</span>/CNAME
</span></code></pre></td></tr></table></div></figure>


<p>From <a href="http://help.github.com/pages/#custom_domains">Github&rsquo;s Pages guide</a>:<br>
Next, you’ll need to visit your domain registrar or DNS host and add a record for your domain name.
For a sub-domain like <code>www.example.com</code> you would simply create a CNAME record pointing at <code>charlie.github.com</code>.
If you are using a top-level domain like <code>example.com</code>, you must use an A record pointing to <code>207.97.227.245</code>.
<em>Do not use a CNAME record with a top-level domain</em> it can have adverse side effects on other services like email.
Many DNS services will let you set a CNAME on a TLD, even though you shouldn’t. Remember that it may take up to a full day for DNS changes to propagate, so be patient.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Command shell(cmd.exe) Runs Only First Command]]></title>
    <link href="http://alfred-sun.github.io/xxx/blog/2011/12/29/cmdshellfirst/"/>
    <updated>2011-12-29T00:00:00+08:00</updated>
    <id>http://alfred-sun.github.io/xxx/blog/2011/12/29/cmdshellfirst</id>
    <content type="html"><![CDATA[<p>If you written a command shell script and it exits after executing only first command, its probably because one of the command in the
command script is itself a command script. In that case, such script needs to be called using the <em>call</em> command.</p>

<p>For example,</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">@echo off
echo &quot;Building Content&quot;
jekyll --no-server --no-auto

echo &quot;Checking out master&quot;
git checkout master


echo &quot;Copying the updated content to root&quot;
cp -r _site/* . &amp;&amp; rm -rf _site/ &amp;&amp; touch .nojekyll

echo &quot;Adding the content&quot;
git add .

echo &quot;Updated content&quot;
git commit -am &quot;Updated content&quot;

echo &quot;Pushed content&quot;
git push --all origin</code></pre></div>


<p>The above script will simply exit after running the first command. This is because Jekyll itself runs as a batch file in Windows. To correct this, we need to call Jekyll with the use of <em>call</em> command</p>

<!--more-->




<div class="highlight"><pre><code class="language-text" data-lang="text">@echo off
echo &quot;Building Content&quot;
call jekyll --no-server --no-auto

echo &quot;Checking out master&quot;
git checkout master


echo &quot;Copying the updated content to root&quot;
cp -r _site/* . &amp;&amp; rm -rf _site/ &amp;&amp; touch .nojekyll

echo &quot;Adding the content&quot;
git add .

echo &quot;Updated content&quot;
git commit -am &quot;Updated content&quot;

echo &quot;Pushed content&quot;
git push --all origin</code></pre></div>

]]></content>
  </entry>
  
</feed>
